import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.net.HttpURLConnection;
import java.net.URL;
import java.util.ArrayList;
import java.util.List;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

public class SimpleHttpDirectoryLister {
    public static void main(String[] args) {
        String dirUrl = "http://example.com/files/"; // URL –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å –ª–∏—Å—Ç–∏–Ω–≥–æ–º
        
        try {
            List<String> files = listFilesFromUrl(dirUrl);
            System.out.println("–§–∞–π–ª—ã –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏:");
            files.forEach(System.out::println);
        } catch (IOException e) {
            System.err.println("–û—à–∏–±–∫–∞: " + e.getMessage());
        }
    }

    public static List<String> listFilesFromUrl(String dirUrl) throws IOException {
        List<String> files = new ArrayList<>();
        URL url = new URL(dirUrl);
        HttpURLConnection conn = (HttpURLConnection) url.openConnection();
        conn.setRequestMethod("GET");

        if (conn.getResponseCode() == 200) { // HTTP OK
            try (BufferedReader reader = new BufferedReader(
                    new InputStreamReader(conn.getInputStream()))) {
                String line;
                // –†–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å—Å—ã–ª–æ–∫ –≤ HTML (–æ—á–µ–Ω—å —É–ø—Ä–æ—â—ë–Ω–Ω–æ–µ!)
                Pattern pattern = Pattern.compile("<a href=\"([^\"]+)\">([^<]+)</a>");
                while ((line = reader.readLine()) != null) {
                    Matcher matcher = pattern.matcher(line);
                    if (matcher.find()) {
                        String fileName = matcher.group(1);
                        if (!fileName.equals("../") && !fileName.startsWith("?")) {
                            files.add(fileName);
                        }
                    }
                }
            }
        } else {
            throw new IOException("HTTP-–æ—à–∏–±–∫–∞: " + conn.getResponseCode());
        }
        conn.disconnect();
        return files;
    }
}

import org.jsoup.Jsoup;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.select.Elements;
import java.io.IOException;

public class HttpDirectoryLister {
    public static void main(String[] args) {
        String serverUrl = "http://example.com/files/";  // URL –ø–∞–ø–∫–∏ —Å –ª–∏—Å—Ç–∏–Ω–≥–æ–º

        try {
            Document doc = Jsoup.connect(serverUrl).get();
            Elements links = doc.select("a[href]");  // –í—Å–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ

            System.out.println("–§–∞–π–ª—ã –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏:");
            for (Element link : links) {
                String href = link.attr("href");
                if (!href.equals("../") && !href.startsWith("?")) {
                    System.out.println(href);
                }
            }
        } catch (IOException e) {
            System.err.println("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤: " + e.getMessage());
        }
    }
}


import javax.sound.midi.*;
import java.util.*;

public class FurElise {
    public static void main(String[] args) throws MidiUnavailableException, InterruptedException {
        Synthesizer synth = MidiSystem.getSynthesizer();
        synth.open();
        
        MidiChannel melody = synth.getChannels()[0];
        MidiChannel accompaniment = synth.getChannels()[1];
        
        melody.programChange(0);  // –†–æ—è–ª—å
        accompaniment.programChange(0);
        
        int tempo = 180; // –°–∫–æ—Ä–æ—Å—Ç—å (–º–æ–∂–Ω–æ –º–µ–Ω—è—Ç—å)
        int pedalTime = 300; // –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–µ–¥–∞–ª–∏

        // –ì–ª–∞–≤–Ω–∞—è —Ç–µ–º–∞ (—á–∞—Å—Ç—å A)
        int[][] themeA = {
            {76, 1}, {75, 1},                        // E - D#
            {76, 1}, {75, 1}, {76, 1}, {71, 1},      // E - D# - E - B
            {69, 1}, {68, 1}, {64, 2},               // A - G# - E
            {72, 1}, {71, 1}, {67, 1}, {64, 1},      // C - B - G - E
            {64, 1}, {68, 1}, {69, 2}                // E - G - A
        };

        // –í–∞—Ä–∏–∞—Ü–∏—è (—á–∞—Å—Ç—å B)
        int[][] themeB = {
            {72, 1}, {71, 1}, {72, 1}, {71, 1},      // C - B - C - B
            {72, 1}, {76, 1}, {84, 1}, {76, 1},       // C - E - C (–≤–µ—Ä—Ö) - E
            {72, 1}, {71, 1}, {69, 1}, {71, 1},      // C - B - A - B
            {72, 4}                                   // C (–¥–æ–ª–≥–∞—è)
        };

        // –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ —Å –ø–µ–¥–∞–ª—å—é
        System.out.println(" ‚ô™ –ù–∞—á–∏–Ω–∞–µ–º '–ö –≠–ª–∏–∑–µ'... ‚ô´ ");
        
        // –ß–∞—Å—Ç—å A (2 —Ä–∞–∑–∞)
        playSection(melody, accompaniment, themeA, tempo, pedalTime);
        playSection(melody, accompaniment, themeA, tempo, pedalTime);
        
        // –ß–∞—Å—Ç—å B
        playSection(melody, accompaniment, themeB, tempo, pedalTime);
        
        // –ß–∞—Å—Ç—å A (—Ñ–∏–Ω–∞–ª)
        playSection(melody, accompaniment, themeA, tempo, pedalTime);
        
        synth.close();
        System.out.println(" ‚ô¨ –ö–æ–Ω–µ—Ü! –õ—É–Ω–Ω—ã–π —Å–≤–µ—Ç –∏ —Ä–æ–º–∞–Ω—Ç–∏–∫–∞... üåô");
    }
    
    private static void playSection(MidiChannel melody, MidiChannel accompaniment, 
                                  int[][] notes, int tempo, int pedalTime) 
                                  throws InterruptedException {
        for (int[] note : notes) {
            melody.noteOn(note[0], 90); // –ì—Ä–æ–º–∫–æ—Å—Ç—å 90
            accompaniment.noteOn(note[0] - 12, 40); // –ê–∫–∫–æ—Ä–¥—ã –Ω–∞ –æ–∫—Ç–∞–≤—É –Ω–∏–∂–µ
            
            // –ü–µ–¥–∞–ª—å (–∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä 64)
            melody.controlChange(64, 127); 
            
            Thread.sleep(tempo * note[1]);
            
            melody.noteOff(note[0]);
            accompaniment.noteOff(note[0] - 12);
            
            // –û—Ç–ø—É—Å–∫–∞–µ–º –ø–µ–¥–∞–ª—å –∏–Ω–æ–≥–¥–∞ –¥–ª—è —á–µ—Ç–∫–æ—Å—Ç–∏
            if (note[1] >= 2) {
                melody.controlChange(64, 0);
                Thread.sleep(50);
            }
        }
    }
}
